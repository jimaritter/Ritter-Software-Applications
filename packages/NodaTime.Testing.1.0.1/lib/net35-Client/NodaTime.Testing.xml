<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NodaTime.Testing</name>
    </assembly>
    <members>
        <member name="T:NodaTime.Testing.FakeClock">
            <summary>
            Clock which can be constructed with an initial instant, and then advanced programmatically.
            This class is designed to be used when testing classes which take an <see cref="T:NodaTime.IClock"/> as a dependency.
            </summary>
            <remarks>
            This class is somewhere between a fake and a stub, depending on how it's used - if it's set to
            <see cref="P:NodaTime.Testing.FakeClock.AutoAdvance"/> then time will pass, but in a pretty odd way (i.e. dependent on how
            often it's consulted).
            </remarks>
            <threadsafety>
            This type is thread-safe, primarily in order to allow <see cref="T:NodaTime.IClock"/> to be documented as
            "thread safe in all built-in implementations".
            </threadsafety>
        </member>
        <member name="M:NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant)">
            <summary>
            Creates a fake clock initially set to the given instant, with no auto-advance.
            </summary>
        </member>
        <member name="M:NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant,NodaTime.Duration)">
            <summary>
            Creates a fake clock initially set to the given instant, with a given level of auto-advance.
            </summary>
        </member>
        <member name="M:NodaTime.Testing.FakeClock.FromUtc(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a fake clock initially set to midnight of the given year/month/day in UTC in the ISO calendar.
            </summary>
        </member>
        <member name="M:NodaTime.Testing.FakeClock.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a fake clock initially set to the given year/month/day/time in UTC in the ISO calendar.
            </summary>
        </member>
        <member name="M:NodaTime.Testing.FakeClock.Advance(NodaTime.Duration)">
            <summary>
            Advances the clock by the given duration.
            </summary>
        </member>
        <member name="M:NodaTime.Testing.FakeClock.AdvanceTicks(System.Int64)">
            <summary>
            Advances the clock by the given number of ticks.
            </summary>
        </member>
        <member name="M:NodaTime.Testing.FakeClock.AdvanceMilliseconds(System.Int64)">
            <summary>
            Advances the clock by the given number of milliseconds.
            </summary>
        </member>
        <member name="M:NodaTime.Testing.FakeClock.AdvanceSeconds(System.Int64)">
            <summary>
            Advances the clock by the given number of seconds.
            </summary>
        </member>
        <member name="M:NodaTime.Testing.FakeClock.AdvanceMinutes(System.Int64)">
            <summary>
            Advances the clock by the given number of minutes.
            </summary>
        </member>
        <member name="M:NodaTime.Testing.FakeClock.AdvanceHours(System.Int64)">
            <summary>
            Advances the clock by the given number of hours.
            </summary>
        </member>
        <member name="M:NodaTime.Testing.FakeClock.AdvanceDays(System.Int64)">
            <summary>
            Advances the clock by the given number of standard (24-hour) days.
            </summary>
        </member>
        <member name="M:NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)">
            <summary>
            Resets the clock to the given instant.
            </summary>
        </member>
        <member name="P:NodaTime.Testing.FakeClock.Now">
            <summary>
            Returns the "current time" for this clock. Unlike a normal clock, this
            property will return the same value from repeated calls until one of the methods
            to change the time is called.
            </summary>
        </member>
        <member name="P:NodaTime.Testing.FakeClock.AutoAdvance">
            <summary>
            Amount of time to advance the clock by each time <see cref="P:NodaTime.Testing.FakeClock.Now"/> is fetched.
            </summary>
            <remarks>
            This defaults to zero, in which case the clock doesn't change other than by calls
            to <see cref="M:NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)"/>. The value may be negative, to simulate particularly odd
            system clock effects.
            </remarks>
        </member>
        <member name="T:NodaTime.Testing.NamespaceDoc">
            <summary>
            <para>
            The NodaTime.Testing namespace contains types designed to help write tests against
            code which uses Noda Time. "Child" namespaces are organized to reflect the same structure
            as the main project.
            </para>
            <para>
            This code is not included as part of the main NuGet package; it's in a separate NodaTime.Testing package.
            </para>
            </summary>
        </member>
        <member name="T:NodaTime.Testing.TimeZones.NamespaceDoc">
            <summary>
            <para>
            Provides types to aid testing production code which uses time zones, to avoid hard-coding
            knowledge of "real" time zones into tests.
            </para>
            <para>
            This code is not included as part of the main NuGet package; it's in a separate NodaTime.Testing package.
            </para>
            </summary>
        </member>
        <member name="T:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone">
            <summary>
            Time zone with a single transition between two offsets. This provides a simple way to test behaviour across a transition.
            </summary>
        </member>
        <member name="M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,System.Int32,System.Int32)">
            <summary>
            Creates a zone with a single transition between two offsets.
            </summary>
            <param name="transitionPoint">The transition point as an <see cref="T:NodaTime.Instant"/>.</param>
            <param name="offsetBeforeHours">The offset of local time from UTC, in hours, before the transition.</param>
            <param name="offsetAfterHours">The offset of local time from UTC, in hours, before the transition.</param>
        </member>
        <member name="M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset)">
            <summary>
            Creates a zone with a single transition between two offsets.
            </summary>
            <param name="transitionPoint">The transition point as an <see cref="T:NodaTime.Instant"/>.</param>
            <param name="offsetBefore">The offset of local time from UTC before the transition.</param>
            <param name="offsetAfter">The offset of local time from UTC before the transition.</param>
        </member>
        <member name="M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)">
            <inheritdoc />
            <remarks>
            This returns either the zone interval before or after the transition, based on the instant provided.
            </remarks>
        </member>
        <member name="M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)">
            <inheritdoc />
        </member>
        <member name="M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval">
            <summary>
            The <see cref="T:NodaTime.TimeZones.ZoneInterval"/> for the period before the transition, starting at the beginning of time.
            </summary>
        </member>
        <member name="P:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval">
            <summary>
            The <see cref="T:NodaTime.TimeZones.ZoneInterval"/> for the period after the transition, ending at the end of time.
            </summary>
        </member>
    </members>
</doc>
